{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Directive, EventEmitter, TemplateRef, Component, Input, Output, ContentChild, ViewChild, NgModule } from '@angular/core';\nimport { timer } from 'rxjs';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n/**\r\n * fileEntry is an instance of {@link FileSystemFileEntry} or {@link FileSystemDirectoryEntry}.\r\n * Which one is it can be checked using {@link FileSystemEntry.isFile} or {@link FileSystemEntry.isDirectory}\r\n * properties of the given {@link FileSystemEntry}.\r\n */\n\nconst _c0 = [\"fileSelector\"];\n\nfunction NgxFileDropComponent_ng_template_4_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r4.dropZoneLabel);\n  }\n}\n\nfunction NgxFileDropComponent_ng_template_4_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\")(1, \"input\", 9);\n    i0.ɵɵlistener(\"click\", function NgxFileDropComponent_ng_template_4_div_1_Template_input_click_1_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r6.openFileSelector($event));\n    });\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"value\", ctx_r5.browseBtnLabel);\n    i0.ɵɵproperty(\"className\", ctx_r5.browseBtnClassName);\n  }\n}\n\nfunction NgxFileDropComponent_ng_template_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, NgxFileDropComponent_ng_template_4_div_0_Template, 2, 1, \"div\", 6);\n    i0.ɵɵtemplate(1, NgxFileDropComponent_ng_template_4_div_1_Template, 2, 2, \"div\", 7);\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.dropZoneLabel);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.showBrowseBtn);\n  }\n}\n\nfunction NgxFileDropComponent_ng_template_6_Template(rf, ctx) {}\n\nconst _c1 = function (a0) {\n  return {\n    openFileSelector: a0\n  };\n};\n\nclass NgxFileDropEntry {\n  constructor(relativePath, fileEntry) {\n    this.relativePath = relativePath;\n    this.fileEntry = fileEntry;\n  }\n\n}\n\nclass NgxFileDropContentTemplateDirective {\n  constructor(template) {\n    this.template = template;\n  }\n\n}\n\nNgxFileDropContentTemplateDirective.ɵfac = function NgxFileDropContentTemplateDirective_Factory(t) {\n  return new (t || NgxFileDropContentTemplateDirective)(i0.ɵɵdirectiveInject(i0.TemplateRef));\n};\n\nNgxFileDropContentTemplateDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: NgxFileDropContentTemplateDirective,\n  selectors: [[\"\", \"ngx-file-drop-content-tmp\", \"\"]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxFileDropContentTemplateDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[ngx-file-drop-content-tmp]'\n    }]\n  }], function () {\n    return [{\n      type: i0.TemplateRef\n    }];\n  }, null);\n})();\n\nclass NgxFileDropComponent {\n  constructor(zone, renderer) {\n    this.zone = zone;\n    this.renderer = renderer;\n    this.accept = '*';\n    this.directory = false;\n    this.multiple = true;\n    this.dropZoneLabel = '';\n    this.dropZoneClassName = 'ngx-file-drop__drop-zone';\n    this.useDragEnter = false;\n    this.contentClassName = 'ngx-file-drop__content';\n    this.showBrowseBtn = false;\n    this.browseBtnClassName = 'btn btn-primary btn-xs ngx-file-drop__browse-btn';\n    this.browseBtnLabel = 'Browse files';\n    this.onFileDrop = new EventEmitter();\n    this.onFileOver = new EventEmitter();\n    this.onFileLeave = new EventEmitter();\n    this.isDraggingOverDropZone = false;\n    this.globalDraggingInProgress = false;\n    this.files = [];\n    this.numOfActiveReadEntries = 0;\n    this.helperFormEl = null;\n    this.fileInputPlaceholderEl = null;\n    this.dropEventTimerSubscription = null;\n    this._disabled = false;\n\n    this.openFileSelector = event => {\n      if (this.fileSelector && this.fileSelector.nativeElement) {\n        this.fileSelector.nativeElement.click();\n      }\n    };\n\n    this.globalDragStartListener = this.renderer.listen('document', 'dragstart', evt => {\n      this.globalDraggingInProgress = true;\n    });\n    this.globalDragEndListener = this.renderer.listen('document', 'dragend', evt => {\n      this.globalDraggingInProgress = false;\n    });\n  }\n\n  get disabled() {\n    return this._disabled;\n  }\n\n  set disabled(value) {\n    this._disabled = value != null && `${value}` !== 'false';\n  }\n\n  ngOnDestroy() {\n    if (this.dropEventTimerSubscription) {\n      this.dropEventTimerSubscription.unsubscribe();\n      this.dropEventTimerSubscription = null;\n    }\n\n    this.globalDragStartListener();\n    this.globalDragEndListener();\n    this.files = [];\n    this.helperFormEl = null;\n    this.fileInputPlaceholderEl = null;\n  }\n\n  onDragOver(event) {\n    if (this.useDragEnter) {\n      this.preventAndStop(event);\n\n      if (event.dataTransfer) {\n        event.dataTransfer.dropEffect = 'copy';\n      }\n    } else if (!this.isDropzoneDisabled() && !this.useDragEnter && event.dataTransfer) {\n      if (!this.isDraggingOverDropZone) {\n        this.isDraggingOverDropZone = true;\n        this.onFileOver.emit(event);\n      }\n\n      this.preventAndStop(event);\n      event.dataTransfer.dropEffect = 'copy';\n    }\n  }\n\n  onDragEnter(event) {\n    if (!this.isDropzoneDisabled() && this.useDragEnter) {\n      if (!this.isDraggingOverDropZone) {\n        this.isDraggingOverDropZone = true;\n        this.onFileOver.emit(event);\n      }\n\n      this.preventAndStop(event);\n    }\n  }\n\n  onDragLeave(event) {\n    if (!this.isDropzoneDisabled()) {\n      if (this.isDraggingOverDropZone) {\n        this.isDraggingOverDropZone = false;\n        this.onFileLeave.emit(event);\n      }\n\n      this.preventAndStop(event);\n    }\n  }\n\n  dropFiles(event) {\n    if (this.isDropzoneDisabled()) {\n      return;\n    }\n\n    this.isDraggingOverDropZone = false;\n\n    if (event.dataTransfer) {\n      let items;\n\n      if (event.dataTransfer.items) {\n        items = event.dataTransfer.items;\n      } else {\n        items = event.dataTransfer.files;\n      }\n\n      this.preventAndStop(event);\n      this.checkFiles(items);\n    }\n  }\n  /**\r\n   * Processes the change event of the file input and adds the given files.\r\n   * @param Event event\r\n   */\n\n\n  uploadFiles(event) {\n    if (this.isDropzoneDisabled()) {\n      return;\n    }\n\n    if (event.target) {\n      const items = event.target.files || [];\n      this.checkFiles(items);\n      this.resetFileInput();\n    }\n  }\n\n  getFakeDropEntry(file) {\n    const fakeFileEntry = {\n      name: file.name,\n      isDirectory: false,\n      isFile: true,\n      file: callback => callback(file)\n    };\n    return new NgxFileDropEntry(fakeFileEntry.name, fakeFileEntry);\n  }\n\n  checkFile(item) {\n    if (!item) {\n      return;\n    }\n\n    if (\"getAsFile\" in item) {\n      const file = item.getAsFile();\n\n      if (file) {\n        this.addToQueue(this.getFakeDropEntry(file));\n        return;\n      }\n    }\n\n    if (\"webkitGetAsEntry\" in item) {\n      let entry = item.webkitGetAsEntry();\n\n      if (entry) {\n        if (entry.isFile) {\n          const toUpload = new NgxFileDropEntry(entry.name, entry);\n          this.addToQueue(toUpload);\n        } else if (entry.isDirectory) {\n          this.traverseFileTree(entry, entry.name);\n        }\n\n        return;\n      }\n    }\n\n    this.addToQueue(this.getFakeDropEntry(item));\n  }\n\n  checkFiles(items) {\n    for (let i = 0; i < items.length; i++) {\n      this.checkFile(items[i]);\n    }\n\n    if (this.dropEventTimerSubscription) {\n      this.dropEventTimerSubscription.unsubscribe();\n    }\n\n    this.dropEventTimerSubscription = timer(200, 200).subscribe(() => {\n      if (this.files.length > 0 && this.numOfActiveReadEntries === 0) {\n        const files = this.files;\n        this.files = [];\n        this.onFileDrop.emit(files);\n      }\n    });\n  }\n\n  traverseFileTree(item, path) {\n    if (item.isFile) {\n      const toUpload = new NgxFileDropEntry(path, item);\n      this.files.push(toUpload);\n    } else {\n      path = path + '/';\n      const dirReader = item.createReader();\n      let entries = [];\n\n      const readEntries = () => {\n        this.numOfActiveReadEntries++;\n        dirReader.readEntries(result => {\n          if (!result.length) {\n            // add empty folders\n            if (entries.length === 0) {\n              const toUpload = new NgxFileDropEntry(path, item);\n              this.zone.run(() => {\n                this.addToQueue(toUpload);\n              });\n            } else {\n              for (let i = 0; i < entries.length; i++) {\n                this.zone.run(() => {\n                  this.traverseFileTree(entries[i], path + entries[i].name);\n                });\n              }\n            }\n          } else {\n            // continue with the reading\n            entries = entries.concat(result);\n            readEntries();\n          }\n\n          this.numOfActiveReadEntries--;\n        });\n      };\n\n      readEntries();\n    }\n  }\n  /**\r\n   * Clears any added files from the file input element so the same file can subsequently be added multiple times.\r\n   */\n\n\n  resetFileInput() {\n    if (this.fileSelector && this.fileSelector.nativeElement) {\n      const fileInputEl = this.fileSelector.nativeElement;\n      const fileInputContainerEl = fileInputEl.parentElement;\n      const helperFormEl = this.getHelperFormElement();\n      const fileInputPlaceholderEl = this.getFileInputPlaceholderElement(); // Just a quick check so we do not mess up the DOM (will never happen though).\n\n      if (fileInputContainerEl !== helperFormEl) {\n        // Insert the form input placeholder in the DOM before the form input element.\n        this.renderer.insertBefore(fileInputContainerEl, fileInputPlaceholderEl, fileInputEl); // Add the form input as child of the temporary form element, removing the form input from the DOM.\n\n        this.renderer.appendChild(helperFormEl, fileInputEl); // Reset the form, thus clearing the input element of any files.\n\n        helperFormEl.reset(); // Add the file input back to the DOM in place of the file input placeholder element.\n\n        this.renderer.insertBefore(fileInputContainerEl, fileInputEl, fileInputPlaceholderEl); // Remove the input placeholder from the DOM\n\n        this.renderer.removeChild(fileInputContainerEl, fileInputPlaceholderEl);\n      }\n    }\n  }\n  /**\r\n   * Get a cached HTML form element as a helper element to clear the file input element.\r\n   */\n\n\n  getHelperFormElement() {\n    if (!this.helperFormEl) {\n      this.helperFormEl = this.renderer.createElement('form');\n    }\n\n    return this.helperFormEl;\n  }\n  /**\r\n   * Get a cached HTML div element to be used as placeholder for the file input element when clearing said element.\r\n   */\n\n\n  getFileInputPlaceholderElement() {\n    if (!this.fileInputPlaceholderEl) {\n      this.fileInputPlaceholderEl = this.renderer.createElement('div');\n    }\n\n    return this.fileInputPlaceholderEl;\n  }\n\n  isDropzoneDisabled() {\n    return this.globalDraggingInProgress || this.disabled;\n  }\n\n  addToQueue(item) {\n    this.files.push(item);\n  }\n\n  preventAndStop(event) {\n    event.stopPropagation();\n    event.preventDefault();\n  }\n\n}\n\nNgxFileDropComponent.ɵfac = function NgxFileDropComponent_Factory(t) {\n  return new (t || NgxFileDropComponent)(i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.Renderer2));\n};\n\nNgxFileDropComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NgxFileDropComponent,\n  selectors: [[\"ngx-file-drop\"]],\n  contentQueries: function NgxFileDropComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, NgxFileDropContentTemplateDirective, 5, TemplateRef);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.contentTemplate = _t.first);\n    }\n  },\n  viewQuery: function NgxFileDropComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 7);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.fileSelector = _t.first);\n    }\n  },\n  inputs: {\n    accept: \"accept\",\n    directory: \"directory\",\n    multiple: \"multiple\",\n    dropZoneLabel: \"dropZoneLabel\",\n    dropZoneClassName: \"dropZoneClassName\",\n    useDragEnter: \"useDragEnter\",\n    contentClassName: \"contentClassName\",\n    showBrowseBtn: \"showBrowseBtn\",\n    browseBtnClassName: \"browseBtnClassName\",\n    browseBtnLabel: \"browseBtnLabel\",\n    disabled: \"disabled\"\n  },\n  outputs: {\n    onFileDrop: \"onFileDrop\",\n    onFileOver: \"onFileOver\",\n    onFileLeave: \"onFileLeave\"\n  },\n  decls: 7,\n  vars: 15,\n  consts: [[3, \"className\", \"drop\", \"dragover\", \"dragenter\", \"dragleave\"], [3, \"className\"], [\"type\", \"file\", 1, \"ngx-file-drop__file-input\", 3, \"accept\", \"multiple\", \"change\"], [\"fileSelector\", \"\"], [\"defaultContentTemplate\", \"\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [\"class\", \"ngx-file-drop__drop-zone-label\", 4, \"ngIf\"], [4, \"ngIf\"], [1, \"ngx-file-drop__drop-zone-label\"], [\"type\", \"button\", 3, \"className\", \"value\", \"click\"]],\n  template: function NgxFileDropComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵlistener(\"drop\", function NgxFileDropComponent_Template_div_drop_0_listener($event) {\n        return ctx.dropFiles($event);\n      })(\"dragover\", function NgxFileDropComponent_Template_div_dragover_0_listener($event) {\n        return ctx.onDragOver($event);\n      })(\"dragenter\", function NgxFileDropComponent_Template_div_dragenter_0_listener($event) {\n        return ctx.onDragEnter($event);\n      })(\"dragleave\", function NgxFileDropComponent_Template_div_dragleave_0_listener($event) {\n        return ctx.onDragLeave($event);\n      });\n      i0.ɵɵelementStart(1, \"div\", 1)(2, \"input\", 2, 3);\n      i0.ɵɵlistener(\"change\", function NgxFileDropComponent_Template_input_change_2_listener($event) {\n        return ctx.uploadFiles($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(4, NgxFileDropComponent_ng_template_4_Template, 2, 2, \"ng-template\", null, 4, i0.ɵɵtemplateRefExtractor);\n      i0.ɵɵtemplate(6, NgxFileDropComponent_ng_template_6_Template, 0, 0, \"ng-template\", 5);\n      i0.ɵɵelementEnd()();\n    }\n\n    if (rf & 2) {\n      const _r1 = i0.ɵɵreference(5);\n\n      i0.ɵɵclassProp(\"ngx-file-drop__drop-zone--over\", ctx.isDraggingOverDropZone);\n      i0.ɵɵproperty(\"className\", ctx.dropZoneClassName);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"className\", ctx.contentClassName);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"accept\", ctx.accept)(\"multiple\", ctx.multiple);\n      i0.ɵɵattribute(\"directory\", ctx.directory || undefined)(\"webkitdirectory\", ctx.directory || undefined)(\"mozdirectory\", ctx.directory || undefined)(\"msdirectory\", ctx.directory || undefined)(\"odirectory\", ctx.directory || undefined);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngTemplateOutlet\", ctx.contentTemplate || _r1)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(13, _c1, ctx.openFileSelector));\n    }\n  },\n  dependencies: [i1.NgIf, i1.NgTemplateOutlet],\n  styles: [\".ngx-file-drop__drop-zone[_ngcontent-%COMP%]{height:100px;margin:auto;border:2px dotted #0782d0;border-radius:30px}.ngx-file-drop__drop-zone--over[_ngcontent-%COMP%]{background-color:#93939380}.ngx-file-drop__content[_ngcontent-%COMP%]{display:flex;align-items:center;justify-content:center;height:100px;color:#0782d0}.ngx-file-drop__drop-zone-label[_ngcontent-%COMP%]{text-align:center}.ngx-file-drop__file-input[_ngcontent-%COMP%]{display:none}\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxFileDropComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-file-drop',\n      template: \"<div [className]=\\\"dropZoneClassName\\\"\\r\\n     [class.ngx-file-drop__drop-zone--over]=\\\"isDraggingOverDropZone\\\"\\r\\n     (drop)=\\\"dropFiles($event)\\\"\\r\\n     (dragover)=\\\"onDragOver($event)\\\"\\r\\n     (dragenter)=\\\"onDragEnter($event)\\\"\\r\\n     (dragleave)=\\\"onDragLeave($event)\\\">\\r\\n  <div [className]=\\\"contentClassName\\\">\\r\\n    <input \\r\\n      type=\\\"file\\\" \\r\\n      #fileSelector \\r\\n      [accept]=\\\"accept\\\" \\r\\n      [attr.directory]=\\\"directory || undefined\\\" \\r\\n      [attr.webkitdirectory]=\\\"directory || undefined\\\"\\r\\n      [attr.mozdirectory]=\\\"directory || undefined\\\"\\r\\n      [attr.msdirectory]=\\\"directory || undefined\\\"\\r\\n      [attr.odirectory]=\\\"directory || undefined\\\"\\r\\n      [multiple]=\\\"multiple\\\"\\r\\n      (change)=\\\"uploadFiles($event)\\\" \\r\\n      class=\\\"ngx-file-drop__file-input\\\" \\r\\n    />\\r\\n\\r\\n    <ng-template #defaultContentTemplate>\\r\\n      <div *ngIf=\\\"dropZoneLabel\\\" class=\\\"ngx-file-drop__drop-zone-label\\\">{{dropZoneLabel}}</div>\\r\\n      <div *ngIf=\\\"showBrowseBtn\\\">\\r\\n        <input type=\\\"button\\\" [className]=\\\"browseBtnClassName\\\" value=\\\"{{browseBtnLabel}}\\\" (click)=\\\"openFileSelector($event)\\\" />\\r\\n      </div>\\r\\n    </ng-template>\\r\\n\\r\\n    <ng-template\\r\\n      [ngTemplateOutlet]=\\\"contentTemplate || defaultContentTemplate\\\"\\r\\n      [ngTemplateOutletContext]=\\\"{ openFileSelector: openFileSelector }\\\">\\r\\n    </ng-template>\\r\\n  </div>\\r\\n</div>\\r\\n\",\n      styles: [\".ngx-file-drop__drop-zone{height:100px;margin:auto;border:2px dotted #0782d0;border-radius:30px}.ngx-file-drop__drop-zone--over{background-color:#93939380}.ngx-file-drop__content{display:flex;align-items:center;justify-content:center;height:100px;color:#0782d0}.ngx-file-drop__drop-zone-label{text-align:center}.ngx-file-drop__file-input{display:none}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.NgZone\n    }, {\n      type: i0.Renderer2\n    }];\n  }, {\n    accept: [{\n      type: Input\n    }],\n    directory: [{\n      type: Input\n    }],\n    multiple: [{\n      type: Input\n    }],\n    dropZoneLabel: [{\n      type: Input\n    }],\n    dropZoneClassName: [{\n      type: Input\n    }],\n    useDragEnter: [{\n      type: Input\n    }],\n    contentClassName: [{\n      type: Input\n    }],\n    showBrowseBtn: [{\n      type: Input\n    }],\n    browseBtnClassName: [{\n      type: Input\n    }],\n    browseBtnLabel: [{\n      type: Input\n    }],\n    onFileDrop: [{\n      type: Output\n    }],\n    onFileOver: [{\n      type: Output\n    }],\n    onFileLeave: [{\n      type: Output\n    }],\n    contentTemplate: [{\n      type: ContentChild,\n      args: [NgxFileDropContentTemplateDirective, {\n        read: TemplateRef\n      }]\n    }],\n    fileSelector: [{\n      type: ViewChild,\n      args: ['fileSelector', {\n        static: true\n      }]\n    }],\n    disabled: [{\n      type: Input\n    }]\n  });\n})();\n\nclass NgxFileDropModule {}\n\nNgxFileDropModule.ɵfac = function NgxFileDropModule_Factory(t) {\n  return new (t || NgxFileDropModule)();\n};\n\nNgxFileDropModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgxFileDropModule,\n  bootstrap: [NgxFileDropComponent]\n});\nNgxFileDropModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [],\n  imports: [CommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxFileDropModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [NgxFileDropComponent, NgxFileDropContentTemplateDirective],\n      imports: [CommonModule],\n      exports: [NgxFileDropComponent, NgxFileDropContentTemplateDirective],\n      providers: [],\n      bootstrap: [NgxFileDropComponent]\n    }]\n  }], null, null);\n})();\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { NgxFileDropComponent, NgxFileDropContentTemplateDirective, NgxFileDropEntry, NgxFileDropModule };","map":{"version":3,"names":["i0","Directive","EventEmitter","TemplateRef","Component","Input","Output","ContentChild","ViewChild","NgModule","timer","i1","CommonModule","NgxFileDropEntry","constructor","relativePath","fileEntry","NgxFileDropContentTemplateDirective","template","ɵfac","ɵdir","type","args","selector","NgxFileDropComponent","zone","renderer","accept","directory","multiple","dropZoneLabel","dropZoneClassName","useDragEnter","contentClassName","showBrowseBtn","browseBtnClassName","browseBtnLabel","onFileDrop","onFileOver","onFileLeave","isDraggingOverDropZone","globalDraggingInProgress","files","numOfActiveReadEntries","helperFormEl","fileInputPlaceholderEl","dropEventTimerSubscription","_disabled","openFileSelector","event","fileSelector","nativeElement","click","globalDragStartListener","listen","evt","globalDragEndListener","disabled","value","ngOnDestroy","unsubscribe","onDragOver","preventAndStop","dataTransfer","dropEffect","isDropzoneDisabled","emit","onDragEnter","onDragLeave","dropFiles","items","checkFiles","uploadFiles","target","resetFileInput","getFakeDropEntry","file","fakeFileEntry","name","isDirectory","isFile","callback","checkFile","item","getAsFile","addToQueue","entry","webkitGetAsEntry","toUpload","traverseFileTree","i","length","subscribe","path","push","dirReader","createReader","entries","readEntries","result","run","concat","fileInputEl","fileInputContainerEl","parentElement","getHelperFormElement","getFileInputPlaceholderElement","insertBefore","appendChild","reset","removeChild","createElement","stopPropagation","preventDefault","NgZone","Renderer2","ɵcmp","NgIf","NgTemplateOutlet","styles","contentTemplate","read","static","NgxFileDropModule","ɵmod","ɵinj","declarations","imports","exports","providers","bootstrap"],"sources":["C:/SpringBootWorklplace/youtube-clone/frontend/youtube-clone-ui/node_modules/ngx-file-drop/fesm2020/ngx-file-drop.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Directive, EventEmitter, TemplateRef, Component, Input, Output, ContentChild, ViewChild, NgModule } from '@angular/core';\nimport { timer } from 'rxjs';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\n/**\r\n * fileEntry is an instance of {@link FileSystemFileEntry} or {@link FileSystemDirectoryEntry}.\r\n * Which one is it can be checked using {@link FileSystemEntry.isFile} or {@link FileSystemEntry.isDirectory}\r\n * properties of the given {@link FileSystemEntry}.\r\n */\r\nclass NgxFileDropEntry {\r\n    constructor(relativePath, fileEntry) {\r\n        this.relativePath = relativePath;\r\n        this.fileEntry = fileEntry;\r\n    }\r\n}\n\nclass NgxFileDropContentTemplateDirective {\r\n    constructor(template) {\r\n        this.template = template;\r\n    }\r\n}\r\nNgxFileDropContentTemplateDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.0\", ngImport: i0, type: NgxFileDropContentTemplateDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });\r\nNgxFileDropContentTemplateDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.0.0\", type: NgxFileDropContentTemplateDirective, selector: \"[ngx-file-drop-content-tmp]\", ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.0\", ngImport: i0, type: NgxFileDropContentTemplateDirective, decorators: [{\r\n            type: Directive,\r\n            args: [{ selector: '[ngx-file-drop-content-tmp]' }]\r\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });\n\nclass NgxFileDropComponent {\r\n    constructor(zone, renderer) {\r\n        this.zone = zone;\r\n        this.renderer = renderer;\r\n        this.accept = '*';\r\n        this.directory = false;\r\n        this.multiple = true;\r\n        this.dropZoneLabel = '';\r\n        this.dropZoneClassName = 'ngx-file-drop__drop-zone';\r\n        this.useDragEnter = false;\r\n        this.contentClassName = 'ngx-file-drop__content';\r\n        this.showBrowseBtn = false;\r\n        this.browseBtnClassName = 'btn btn-primary btn-xs ngx-file-drop__browse-btn';\r\n        this.browseBtnLabel = 'Browse files';\r\n        this.onFileDrop = new EventEmitter();\r\n        this.onFileOver = new EventEmitter();\r\n        this.onFileLeave = new EventEmitter();\r\n        this.isDraggingOverDropZone = false;\r\n        this.globalDraggingInProgress = false;\r\n        this.files = [];\r\n        this.numOfActiveReadEntries = 0;\r\n        this.helperFormEl = null;\r\n        this.fileInputPlaceholderEl = null;\r\n        this.dropEventTimerSubscription = null;\r\n        this._disabled = false;\r\n        this.openFileSelector = (event) => {\r\n            if (this.fileSelector && this.fileSelector.nativeElement) {\r\n                this.fileSelector.nativeElement.click();\r\n            }\r\n        };\r\n        this.globalDragStartListener = this.renderer.listen('document', 'dragstart', (evt) => {\r\n            this.globalDraggingInProgress = true;\r\n        });\r\n        this.globalDragEndListener = this.renderer.listen('document', 'dragend', (evt) => {\r\n            this.globalDraggingInProgress = false;\r\n        });\r\n    }\r\n    get disabled() { return this._disabled; }\r\n    set disabled(value) {\r\n        this._disabled = (value != null && `${value}` !== 'false');\r\n    }\r\n    ngOnDestroy() {\r\n        if (this.dropEventTimerSubscription) {\r\n            this.dropEventTimerSubscription.unsubscribe();\r\n            this.dropEventTimerSubscription = null;\r\n        }\r\n        this.globalDragStartListener();\r\n        this.globalDragEndListener();\r\n        this.files = [];\r\n        this.helperFormEl = null;\r\n        this.fileInputPlaceholderEl = null;\r\n    }\r\n    onDragOver(event) {\r\n        if (this.useDragEnter) {\r\n            this.preventAndStop(event);\r\n            if (event.dataTransfer) {\r\n                event.dataTransfer.dropEffect = 'copy';\r\n            }\r\n        }\r\n        else if (!this.isDropzoneDisabled() && !this.useDragEnter && event.dataTransfer) {\r\n            if (!this.isDraggingOverDropZone) {\r\n                this.isDraggingOverDropZone = true;\r\n                this.onFileOver.emit(event);\r\n            }\r\n            this.preventAndStop(event);\r\n            event.dataTransfer.dropEffect = 'copy';\r\n        }\r\n    }\r\n    onDragEnter(event) {\r\n        if (!this.isDropzoneDisabled() && this.useDragEnter) {\r\n            if (!this.isDraggingOverDropZone) {\r\n                this.isDraggingOverDropZone = true;\r\n                this.onFileOver.emit(event);\r\n            }\r\n            this.preventAndStop(event);\r\n        }\r\n    }\r\n    onDragLeave(event) {\r\n        if (!this.isDropzoneDisabled()) {\r\n            if (this.isDraggingOverDropZone) {\r\n                this.isDraggingOverDropZone = false;\r\n                this.onFileLeave.emit(event);\r\n            }\r\n            this.preventAndStop(event);\r\n        }\r\n    }\r\n    dropFiles(event) {\r\n        if (this.isDropzoneDisabled()) {\r\n            return;\r\n        }\r\n        this.isDraggingOverDropZone = false;\r\n        if (event.dataTransfer) {\r\n            let items;\r\n            if (event.dataTransfer.items) {\r\n                items = event.dataTransfer.items;\r\n            }\r\n            else {\r\n                items = event.dataTransfer.files;\r\n            }\r\n            this.preventAndStop(event);\r\n            this.checkFiles(items);\r\n        }\r\n    }\r\n    /**\r\n     * Processes the change event of the file input and adds the given files.\r\n     * @param Event event\r\n     */\r\n    uploadFiles(event) {\r\n        if (this.isDropzoneDisabled()) {\r\n            return;\r\n        }\r\n        if (event.target) {\r\n            const items = event.target.files || [];\r\n            this.checkFiles(items);\r\n            this.resetFileInput();\r\n        }\r\n    }\r\n    getFakeDropEntry(file) {\r\n        const fakeFileEntry = {\r\n            name: file.name,\r\n            isDirectory: false,\r\n            isFile: true,\r\n            file: (callback) => callback(file),\r\n        };\r\n        return new NgxFileDropEntry(fakeFileEntry.name, fakeFileEntry);\r\n    }\r\n    checkFile(item) {\r\n        if (!item) {\r\n            return;\r\n        }\r\n        if (\"getAsFile\" in item) {\r\n            const file = item.getAsFile();\r\n            if (file) {\r\n                this.addToQueue(this.getFakeDropEntry(file));\r\n                return;\r\n            }\r\n        }\r\n        if (\"webkitGetAsEntry\" in item) {\r\n            let entry = item.webkitGetAsEntry();\r\n            if (entry) {\r\n                if (entry.isFile) {\r\n                    const toUpload = new NgxFileDropEntry(entry.name, entry);\r\n                    this.addToQueue(toUpload);\r\n                }\r\n                else if (entry.isDirectory) {\r\n                    this.traverseFileTree(entry, entry.name);\r\n                }\r\n                return;\r\n            }\r\n        }\r\n        this.addToQueue(this.getFakeDropEntry(item));\r\n    }\r\n    checkFiles(items) {\r\n        for (let i = 0; i < items.length; i++) {\r\n            this.checkFile(items[i]);\r\n        }\r\n        if (this.dropEventTimerSubscription) {\r\n            this.dropEventTimerSubscription.unsubscribe();\r\n        }\r\n        this.dropEventTimerSubscription = timer(200, 200)\r\n            .subscribe(() => {\r\n            if (this.files.length > 0 && this.numOfActiveReadEntries === 0) {\r\n                const files = this.files;\r\n                this.files = [];\r\n                this.onFileDrop.emit(files);\r\n            }\r\n        });\r\n    }\r\n    traverseFileTree(item, path) {\r\n        if (item.isFile) {\r\n            const toUpload = new NgxFileDropEntry(path, item);\r\n            this.files.push(toUpload);\r\n        }\r\n        else {\r\n            path = path + '/';\r\n            const dirReader = item.createReader();\r\n            let entries = [];\r\n            const readEntries = () => {\r\n                this.numOfActiveReadEntries++;\r\n                dirReader.readEntries((result) => {\r\n                    if (!result.length) {\r\n                        // add empty folders\r\n                        if (entries.length === 0) {\r\n                            const toUpload = new NgxFileDropEntry(path, item);\r\n                            this.zone.run(() => {\r\n                                this.addToQueue(toUpload);\r\n                            });\r\n                        }\r\n                        else {\r\n                            for (let i = 0; i < entries.length; i++) {\r\n                                this.zone.run(() => {\r\n                                    this.traverseFileTree(entries[i], path + entries[i].name);\r\n                                });\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        // continue with the reading\r\n                        entries = entries.concat(result);\r\n                        readEntries();\r\n                    }\r\n                    this.numOfActiveReadEntries--;\r\n                });\r\n            };\r\n            readEntries();\r\n        }\r\n    }\r\n    /**\r\n     * Clears any added files from the file input element so the same file can subsequently be added multiple times.\r\n     */\r\n    resetFileInput() {\r\n        if (this.fileSelector && this.fileSelector.nativeElement) {\r\n            const fileInputEl = this.fileSelector.nativeElement;\r\n            const fileInputContainerEl = fileInputEl.parentElement;\r\n            const helperFormEl = this.getHelperFormElement();\r\n            const fileInputPlaceholderEl = this.getFileInputPlaceholderElement();\r\n            // Just a quick check so we do not mess up the DOM (will never happen though).\r\n            if (fileInputContainerEl !== helperFormEl) {\r\n                // Insert the form input placeholder in the DOM before the form input element.\r\n                this.renderer.insertBefore(fileInputContainerEl, fileInputPlaceholderEl, fileInputEl);\r\n                // Add the form input as child of the temporary form element, removing the form input from the DOM.\r\n                this.renderer.appendChild(helperFormEl, fileInputEl);\r\n                // Reset the form, thus clearing the input element of any files.\r\n                helperFormEl.reset();\r\n                // Add the file input back to the DOM in place of the file input placeholder element.\r\n                this.renderer.insertBefore(fileInputContainerEl, fileInputEl, fileInputPlaceholderEl);\r\n                // Remove the input placeholder from the DOM\r\n                this.renderer.removeChild(fileInputContainerEl, fileInputPlaceholderEl);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Get a cached HTML form element as a helper element to clear the file input element.\r\n     */\r\n    getHelperFormElement() {\r\n        if (!this.helperFormEl) {\r\n            this.helperFormEl = this.renderer.createElement('form');\r\n        }\r\n        return this.helperFormEl;\r\n    }\r\n    /**\r\n     * Get a cached HTML div element to be used as placeholder for the file input element when clearing said element.\r\n     */\r\n    getFileInputPlaceholderElement() {\r\n        if (!this.fileInputPlaceholderEl) {\r\n            this.fileInputPlaceholderEl = this.renderer.createElement('div');\r\n        }\r\n        return this.fileInputPlaceholderEl;\r\n    }\r\n    isDropzoneDisabled() {\r\n        return (this.globalDraggingInProgress || this.disabled);\r\n    }\r\n    addToQueue(item) {\r\n        this.files.push(item);\r\n    }\r\n    preventAndStop(event) {\r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n    }\r\n}\r\nNgxFileDropComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.0\", ngImport: i0, type: NgxFileDropComponent, deps: [{ token: i0.NgZone }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component });\r\nNgxFileDropComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.0.0\", type: NgxFileDropComponent, selector: \"ngx-file-drop\", inputs: { accept: \"accept\", directory: \"directory\", multiple: \"multiple\", dropZoneLabel: \"dropZoneLabel\", dropZoneClassName: \"dropZoneClassName\", useDragEnter: \"useDragEnter\", contentClassName: \"contentClassName\", showBrowseBtn: \"showBrowseBtn\", browseBtnClassName: \"browseBtnClassName\", browseBtnLabel: \"browseBtnLabel\", disabled: \"disabled\" }, outputs: { onFileDrop: \"onFileDrop\", onFileOver: \"onFileOver\", onFileLeave: \"onFileLeave\" }, queries: [{ propertyName: \"contentTemplate\", first: true, predicate: NgxFileDropContentTemplateDirective, descendants: true, read: TemplateRef }], viewQueries: [{ propertyName: \"fileSelector\", first: true, predicate: [\"fileSelector\"], descendants: true, static: true }], ngImport: i0, template: \"<div [className]=\\\"dropZoneClassName\\\"\\r\\n     [class.ngx-file-drop__drop-zone--over]=\\\"isDraggingOverDropZone\\\"\\r\\n     (drop)=\\\"dropFiles($event)\\\"\\r\\n     (dragover)=\\\"onDragOver($event)\\\"\\r\\n     (dragenter)=\\\"onDragEnter($event)\\\"\\r\\n     (dragleave)=\\\"onDragLeave($event)\\\">\\r\\n  <div [className]=\\\"contentClassName\\\">\\r\\n    <input \\r\\n      type=\\\"file\\\" \\r\\n      #fileSelector \\r\\n      [accept]=\\\"accept\\\" \\r\\n      [attr.directory]=\\\"directory || undefined\\\" \\r\\n      [attr.webkitdirectory]=\\\"directory || undefined\\\"\\r\\n      [attr.mozdirectory]=\\\"directory || undefined\\\"\\r\\n      [attr.msdirectory]=\\\"directory || undefined\\\"\\r\\n      [attr.odirectory]=\\\"directory || undefined\\\"\\r\\n      [multiple]=\\\"multiple\\\"\\r\\n      (change)=\\\"uploadFiles($event)\\\" \\r\\n      class=\\\"ngx-file-drop__file-input\\\" \\r\\n    />\\r\\n\\r\\n    <ng-template #defaultContentTemplate>\\r\\n      <div *ngIf=\\\"dropZoneLabel\\\" class=\\\"ngx-file-drop__drop-zone-label\\\">{{dropZoneLabel}}</div>\\r\\n      <div *ngIf=\\\"showBrowseBtn\\\">\\r\\n        <input type=\\\"button\\\" [className]=\\\"browseBtnClassName\\\" value=\\\"{{browseBtnLabel}}\\\" (click)=\\\"openFileSelector($event)\\\" />\\r\\n      </div>\\r\\n    </ng-template>\\r\\n\\r\\n    <ng-template\\r\\n      [ngTemplateOutlet]=\\\"contentTemplate || defaultContentTemplate\\\"\\r\\n      [ngTemplateOutletContext]=\\\"{ openFileSelector: openFileSelector }\\\">\\r\\n    </ng-template>\\r\\n  </div>\\r\\n</div>\\r\\n\", styles: [\".ngx-file-drop__drop-zone{height:100px;margin:auto;border:2px dotted #0782d0;border-radius:30px}.ngx-file-drop__drop-zone--over{background-color:#93939380}.ngx-file-drop__content{display:flex;align-items:center;justify-content:center;height:100px;color:#0782d0}.ngx-file-drop__drop-zone-label{text-align:center}.ngx-file-drop__file-input{display:none}\\n\"], dependencies: [{ kind: \"directive\", type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i1.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.0\", ngImport: i0, type: NgxFileDropComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'ngx-file-drop', template: \"<div [className]=\\\"dropZoneClassName\\\"\\r\\n     [class.ngx-file-drop__drop-zone--over]=\\\"isDraggingOverDropZone\\\"\\r\\n     (drop)=\\\"dropFiles($event)\\\"\\r\\n     (dragover)=\\\"onDragOver($event)\\\"\\r\\n     (dragenter)=\\\"onDragEnter($event)\\\"\\r\\n     (dragleave)=\\\"onDragLeave($event)\\\">\\r\\n  <div [className]=\\\"contentClassName\\\">\\r\\n    <input \\r\\n      type=\\\"file\\\" \\r\\n      #fileSelector \\r\\n      [accept]=\\\"accept\\\" \\r\\n      [attr.directory]=\\\"directory || undefined\\\" \\r\\n      [attr.webkitdirectory]=\\\"directory || undefined\\\"\\r\\n      [attr.mozdirectory]=\\\"directory || undefined\\\"\\r\\n      [attr.msdirectory]=\\\"directory || undefined\\\"\\r\\n      [attr.odirectory]=\\\"directory || undefined\\\"\\r\\n      [multiple]=\\\"multiple\\\"\\r\\n      (change)=\\\"uploadFiles($event)\\\" \\r\\n      class=\\\"ngx-file-drop__file-input\\\" \\r\\n    />\\r\\n\\r\\n    <ng-template #defaultContentTemplate>\\r\\n      <div *ngIf=\\\"dropZoneLabel\\\" class=\\\"ngx-file-drop__drop-zone-label\\\">{{dropZoneLabel}}</div>\\r\\n      <div *ngIf=\\\"showBrowseBtn\\\">\\r\\n        <input type=\\\"button\\\" [className]=\\\"browseBtnClassName\\\" value=\\\"{{browseBtnLabel}}\\\" (click)=\\\"openFileSelector($event)\\\" />\\r\\n      </div>\\r\\n    </ng-template>\\r\\n\\r\\n    <ng-template\\r\\n      [ngTemplateOutlet]=\\\"contentTemplate || defaultContentTemplate\\\"\\r\\n      [ngTemplateOutletContext]=\\\"{ openFileSelector: openFileSelector }\\\">\\r\\n    </ng-template>\\r\\n  </div>\\r\\n</div>\\r\\n\", styles: [\".ngx-file-drop__drop-zone{height:100px;margin:auto;border:2px dotted #0782d0;border-radius:30px}.ngx-file-drop__drop-zone--over{background-color:#93939380}.ngx-file-drop__content{display:flex;align-items:center;justify-content:center;height:100px;color:#0782d0}.ngx-file-drop__drop-zone-label{text-align:center}.ngx-file-drop__file-input{display:none}\\n\"] }]\r\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i0.Renderer2 }]; }, propDecorators: { accept: [{\r\n                type: Input\r\n            }], directory: [{\r\n                type: Input\r\n            }], multiple: [{\r\n                type: Input\r\n            }], dropZoneLabel: [{\r\n                type: Input\r\n            }], dropZoneClassName: [{\r\n                type: Input\r\n            }], useDragEnter: [{\r\n                type: Input\r\n            }], contentClassName: [{\r\n                type: Input\r\n            }], showBrowseBtn: [{\r\n                type: Input\r\n            }], browseBtnClassName: [{\r\n                type: Input\r\n            }], browseBtnLabel: [{\r\n                type: Input\r\n            }], onFileDrop: [{\r\n                type: Output\r\n            }], onFileOver: [{\r\n                type: Output\r\n            }], onFileLeave: [{\r\n                type: Output\r\n            }], contentTemplate: [{\r\n                type: ContentChild,\r\n                args: [NgxFileDropContentTemplateDirective, { read: TemplateRef }]\r\n            }], fileSelector: [{\r\n                type: ViewChild,\r\n                args: ['fileSelector', { static: true }]\r\n            }], disabled: [{\r\n                type: Input\r\n            }] } });\n\nclass NgxFileDropModule {\r\n}\r\nNgxFileDropModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.0\", ngImport: i0, type: NgxFileDropModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nNgxFileDropModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.0.0\", ngImport: i0, type: NgxFileDropModule, bootstrap: [NgxFileDropComponent], declarations: [NgxFileDropComponent,\r\n        NgxFileDropContentTemplateDirective], imports: [CommonModule], exports: [NgxFileDropComponent,\r\n        NgxFileDropContentTemplateDirective] });\r\nNgxFileDropModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.0.0\", ngImport: i0, type: NgxFileDropModule, providers: [], imports: [CommonModule] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.0\", ngImport: i0, type: NgxFileDropModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    declarations: [\r\n                        NgxFileDropComponent,\r\n                        NgxFileDropContentTemplateDirective,\r\n                    ],\r\n                    imports: [\r\n                        CommonModule\r\n                    ],\r\n                    exports: [\r\n                        NgxFileDropComponent,\r\n                        NgxFileDropContentTemplateDirective,\r\n                    ],\r\n                    providers: [],\r\n                    bootstrap: [\r\n                        NgxFileDropComponent\r\n                    ],\r\n                }]\r\n        }] });\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { NgxFileDropComponent, NgxFileDropContentTemplateDirective, NgxFileDropEntry, NgxFileDropModule };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}