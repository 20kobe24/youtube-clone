{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Directive, EventEmitter, TemplateRef, Component, Input, Output, ContentChild, ViewChild, NgModule } from '@angular/core';\nimport { timer } from 'rxjs';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n/**\r\n * fileEntry is an instance of {@link FileSystemFileEntry} or {@link FileSystemDirectoryEntry}.\r\n * Which one is it can be checked using {@link FileSystemEntry.isFile} or {@link FileSystemEntry.isDirectory}\r\n * properties of the given {@link FileSystemEntry}.\r\n */\n\nconst _c0 = [\"fileSelector\"];\n\nfunction NgxFileDropComponent_ng_template_4_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r4.dropZoneLabel);\n  }\n}\n\nfunction NgxFileDropComponent_ng_template_4_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\")(1, \"input\", 9);\n    i0.ɵɵlistener(\"click\", function NgxFileDropComponent_ng_template_4_div_1_Template_input_click_1_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r6.openFileSelector($event));\n    });\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"value\", ctx_r5.browseBtnLabel);\n    i0.ɵɵproperty(\"className\", ctx_r5.browseBtnClassName);\n  }\n}\n\nfunction NgxFileDropComponent_ng_template_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, NgxFileDropComponent_ng_template_4_div_0_Template, 2, 1, \"div\", 6);\n    i0.ɵɵtemplate(1, NgxFileDropComponent_ng_template_4_div_1_Template, 2, 2, \"div\", 7);\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.dropZoneLabel);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.showBrowseBtn);\n  }\n}\n\nfunction NgxFileDropComponent_ng_template_6_Template(rf, ctx) {}\n\nconst _c1 = function (a0) {\n  return {\n    openFileSelector: a0\n  };\n};\n\nclass NgxFileDropEntry {\n  constructor(relativePath, fileEntry) {\n    this.relativePath = relativePath;\n    this.fileEntry = fileEntry;\n  }\n\n}\n\nlet NgxFileDropContentTemplateDirective = /*#__PURE__*/(() => {\n  class NgxFileDropContentTemplateDirective {\n    constructor(template) {\n      this.template = template;\n    }\n\n  }\n\n  NgxFileDropContentTemplateDirective.ɵfac = function NgxFileDropContentTemplateDirective_Factory(t) {\n    return new (t || NgxFileDropContentTemplateDirective)(i0.ɵɵdirectiveInject(i0.TemplateRef));\n  };\n\n  NgxFileDropContentTemplateDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: NgxFileDropContentTemplateDirective,\n    selectors: [[\"\", \"ngx-file-drop-content-tmp\", \"\"]]\n  });\n  return NgxFileDropContentTemplateDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet NgxFileDropComponent = /*#__PURE__*/(() => {\n  class NgxFileDropComponent {\n    constructor(zone, renderer) {\n      this.zone = zone;\n      this.renderer = renderer;\n      this.accept = '*';\n      this.directory = false;\n      this.multiple = true;\n      this.dropZoneLabel = '';\n      this.dropZoneClassName = 'ngx-file-drop__drop-zone';\n      this.useDragEnter = false;\n      this.contentClassName = 'ngx-file-drop__content';\n      this.showBrowseBtn = false;\n      this.browseBtnClassName = 'btn btn-primary btn-xs ngx-file-drop__browse-btn';\n      this.browseBtnLabel = 'Browse files';\n      this.onFileDrop = new EventEmitter();\n      this.onFileOver = new EventEmitter();\n      this.onFileLeave = new EventEmitter();\n      this.isDraggingOverDropZone = false;\n      this.globalDraggingInProgress = false;\n      this.files = [];\n      this.numOfActiveReadEntries = 0;\n      this.helperFormEl = null;\n      this.fileInputPlaceholderEl = null;\n      this.dropEventTimerSubscription = null;\n      this._disabled = false;\n\n      this.openFileSelector = event => {\n        if (this.fileSelector && this.fileSelector.nativeElement) {\n          this.fileSelector.nativeElement.click();\n        }\n      };\n\n      this.globalDragStartListener = this.renderer.listen('document', 'dragstart', evt => {\n        this.globalDraggingInProgress = true;\n      });\n      this.globalDragEndListener = this.renderer.listen('document', 'dragend', evt => {\n        this.globalDraggingInProgress = false;\n      });\n    }\n\n    get disabled() {\n      return this._disabled;\n    }\n\n    set disabled(value) {\n      this._disabled = value != null && `${value}` !== 'false';\n    }\n\n    ngOnDestroy() {\n      if (this.dropEventTimerSubscription) {\n        this.dropEventTimerSubscription.unsubscribe();\n        this.dropEventTimerSubscription = null;\n      }\n\n      this.globalDragStartListener();\n      this.globalDragEndListener();\n      this.files = [];\n      this.helperFormEl = null;\n      this.fileInputPlaceholderEl = null;\n    }\n\n    onDragOver(event) {\n      if (this.useDragEnter) {\n        this.preventAndStop(event);\n\n        if (event.dataTransfer) {\n          event.dataTransfer.dropEffect = 'copy';\n        }\n      } else if (!this.isDropzoneDisabled() && !this.useDragEnter && event.dataTransfer) {\n        if (!this.isDraggingOverDropZone) {\n          this.isDraggingOverDropZone = true;\n          this.onFileOver.emit(event);\n        }\n\n        this.preventAndStop(event);\n        event.dataTransfer.dropEffect = 'copy';\n      }\n    }\n\n    onDragEnter(event) {\n      if (!this.isDropzoneDisabled() && this.useDragEnter) {\n        if (!this.isDraggingOverDropZone) {\n          this.isDraggingOverDropZone = true;\n          this.onFileOver.emit(event);\n        }\n\n        this.preventAndStop(event);\n      }\n    }\n\n    onDragLeave(event) {\n      if (!this.isDropzoneDisabled()) {\n        if (this.isDraggingOverDropZone) {\n          this.isDraggingOverDropZone = false;\n          this.onFileLeave.emit(event);\n        }\n\n        this.preventAndStop(event);\n      }\n    }\n\n    dropFiles(event) {\n      if (this.isDropzoneDisabled()) {\n        return;\n      }\n\n      this.isDraggingOverDropZone = false;\n\n      if (event.dataTransfer) {\n        let items;\n\n        if (event.dataTransfer.items) {\n          items = event.dataTransfer.items;\n        } else {\n          items = event.dataTransfer.files;\n        }\n\n        this.preventAndStop(event);\n        this.checkFiles(items);\n      }\n    }\n    /**\r\n     * Processes the change event of the file input and adds the given files.\r\n     * @param Event event\r\n     */\n\n\n    uploadFiles(event) {\n      if (this.isDropzoneDisabled()) {\n        return;\n      }\n\n      if (event.target) {\n        const items = event.target.files || [];\n        this.checkFiles(items);\n        this.resetFileInput();\n      }\n    }\n\n    getFakeDropEntry(file) {\n      const fakeFileEntry = {\n        name: file.name,\n        isDirectory: false,\n        isFile: true,\n        file: callback => callback(file)\n      };\n      return new NgxFileDropEntry(fakeFileEntry.name, fakeFileEntry);\n    }\n\n    checkFile(item) {\n      if (!item) {\n        return;\n      }\n\n      if (\"getAsFile\" in item) {\n        const file = item.getAsFile();\n\n        if (file) {\n          this.addToQueue(this.getFakeDropEntry(file));\n          return;\n        }\n      }\n\n      if (\"webkitGetAsEntry\" in item) {\n        let entry = item.webkitGetAsEntry();\n\n        if (entry) {\n          if (entry.isFile) {\n            const toUpload = new NgxFileDropEntry(entry.name, entry);\n            this.addToQueue(toUpload);\n          } else if (entry.isDirectory) {\n            this.traverseFileTree(entry, entry.name);\n          }\n\n          return;\n        }\n      }\n\n      this.addToQueue(this.getFakeDropEntry(item));\n    }\n\n    checkFiles(items) {\n      for (let i = 0; i < items.length; i++) {\n        this.checkFile(items[i]);\n      }\n\n      if (this.dropEventTimerSubscription) {\n        this.dropEventTimerSubscription.unsubscribe();\n      }\n\n      this.dropEventTimerSubscription = timer(200, 200).subscribe(() => {\n        if (this.files.length > 0 && this.numOfActiveReadEntries === 0) {\n          const files = this.files;\n          this.files = [];\n          this.onFileDrop.emit(files);\n        }\n      });\n    }\n\n    traverseFileTree(item, path) {\n      if (item.isFile) {\n        const toUpload = new NgxFileDropEntry(path, item);\n        this.files.push(toUpload);\n      } else {\n        path = path + '/';\n        const dirReader = item.createReader();\n        let entries = [];\n\n        const readEntries = () => {\n          this.numOfActiveReadEntries++;\n          dirReader.readEntries(result => {\n            if (!result.length) {\n              // add empty folders\n              if (entries.length === 0) {\n                const toUpload = new NgxFileDropEntry(path, item);\n                this.zone.run(() => {\n                  this.addToQueue(toUpload);\n                });\n              } else {\n                for (let i = 0; i < entries.length; i++) {\n                  this.zone.run(() => {\n                    this.traverseFileTree(entries[i], path + entries[i].name);\n                  });\n                }\n              }\n            } else {\n              // continue with the reading\n              entries = entries.concat(result);\n              readEntries();\n            }\n\n            this.numOfActiveReadEntries--;\n          });\n        };\n\n        readEntries();\n      }\n    }\n    /**\r\n     * Clears any added files from the file input element so the same file can subsequently be added multiple times.\r\n     */\n\n\n    resetFileInput() {\n      if (this.fileSelector && this.fileSelector.nativeElement) {\n        const fileInputEl = this.fileSelector.nativeElement;\n        const fileInputContainerEl = fileInputEl.parentElement;\n        const helperFormEl = this.getHelperFormElement();\n        const fileInputPlaceholderEl = this.getFileInputPlaceholderElement(); // Just a quick check so we do not mess up the DOM (will never happen though).\n\n        if (fileInputContainerEl !== helperFormEl) {\n          // Insert the form input placeholder in the DOM before the form input element.\n          this.renderer.insertBefore(fileInputContainerEl, fileInputPlaceholderEl, fileInputEl); // Add the form input as child of the temporary form element, removing the form input from the DOM.\n\n          this.renderer.appendChild(helperFormEl, fileInputEl); // Reset the form, thus clearing the input element of any files.\n\n          helperFormEl.reset(); // Add the file input back to the DOM in place of the file input placeholder element.\n\n          this.renderer.insertBefore(fileInputContainerEl, fileInputEl, fileInputPlaceholderEl); // Remove the input placeholder from the DOM\n\n          this.renderer.removeChild(fileInputContainerEl, fileInputPlaceholderEl);\n        }\n      }\n    }\n    /**\r\n     * Get a cached HTML form element as a helper element to clear the file input element.\r\n     */\n\n\n    getHelperFormElement() {\n      if (!this.helperFormEl) {\n        this.helperFormEl = this.renderer.createElement('form');\n      }\n\n      return this.helperFormEl;\n    }\n    /**\r\n     * Get a cached HTML div element to be used as placeholder for the file input element when clearing said element.\r\n     */\n\n\n    getFileInputPlaceholderElement() {\n      if (!this.fileInputPlaceholderEl) {\n        this.fileInputPlaceholderEl = this.renderer.createElement('div');\n      }\n\n      return this.fileInputPlaceholderEl;\n    }\n\n    isDropzoneDisabled() {\n      return this.globalDraggingInProgress || this.disabled;\n    }\n\n    addToQueue(item) {\n      this.files.push(item);\n    }\n\n    preventAndStop(event) {\n      event.stopPropagation();\n      event.preventDefault();\n    }\n\n  }\n\n  NgxFileDropComponent.ɵfac = function NgxFileDropComponent_Factory(t) {\n    return new (t || NgxFileDropComponent)(i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.Renderer2));\n  };\n\n  NgxFileDropComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: NgxFileDropComponent,\n    selectors: [[\"ngx-file-drop\"]],\n    contentQueries: function NgxFileDropComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, NgxFileDropContentTemplateDirective, 5, TemplateRef);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.contentTemplate = _t.first);\n      }\n    },\n    viewQuery: function NgxFileDropComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.fileSelector = _t.first);\n      }\n    },\n    inputs: {\n      accept: \"accept\",\n      directory: \"directory\",\n      multiple: \"multiple\",\n      dropZoneLabel: \"dropZoneLabel\",\n      dropZoneClassName: \"dropZoneClassName\",\n      useDragEnter: \"useDragEnter\",\n      contentClassName: \"contentClassName\",\n      showBrowseBtn: \"showBrowseBtn\",\n      browseBtnClassName: \"browseBtnClassName\",\n      browseBtnLabel: \"browseBtnLabel\",\n      disabled: \"disabled\"\n    },\n    outputs: {\n      onFileDrop: \"onFileDrop\",\n      onFileOver: \"onFileOver\",\n      onFileLeave: \"onFileLeave\"\n    },\n    decls: 7,\n    vars: 15,\n    consts: [[3, \"className\", \"drop\", \"dragover\", \"dragenter\", \"dragleave\"], [3, \"className\"], [\"type\", \"file\", 1, \"ngx-file-drop__file-input\", 3, \"accept\", \"multiple\", \"change\"], [\"fileSelector\", \"\"], [\"defaultContentTemplate\", \"\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [\"class\", \"ngx-file-drop__drop-zone-label\", 4, \"ngIf\"], [4, \"ngIf\"], [1, \"ngx-file-drop__drop-zone-label\"], [\"type\", \"button\", 3, \"className\", \"value\", \"click\"]],\n    template: function NgxFileDropComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵlistener(\"drop\", function NgxFileDropComponent_Template_div_drop_0_listener($event) {\n          return ctx.dropFiles($event);\n        })(\"dragover\", function NgxFileDropComponent_Template_div_dragover_0_listener($event) {\n          return ctx.onDragOver($event);\n        })(\"dragenter\", function NgxFileDropComponent_Template_div_dragenter_0_listener($event) {\n          return ctx.onDragEnter($event);\n        })(\"dragleave\", function NgxFileDropComponent_Template_div_dragleave_0_listener($event) {\n          return ctx.onDragLeave($event);\n        });\n        i0.ɵɵelementStart(1, \"div\", 1)(2, \"input\", 2, 3);\n        i0.ɵɵlistener(\"change\", function NgxFileDropComponent_Template_input_change_2_listener($event) {\n          return ctx.uploadFiles($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(4, NgxFileDropComponent_ng_template_4_Template, 2, 2, \"ng-template\", null, 4, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵtemplate(6, NgxFileDropComponent_ng_template_6_Template, 0, 0, \"ng-template\", 5);\n        i0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        const _r1 = i0.ɵɵreference(5);\n\n        i0.ɵɵclassProp(\"ngx-file-drop__drop-zone--over\", ctx.isDraggingOverDropZone);\n        i0.ɵɵproperty(\"className\", ctx.dropZoneClassName);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"className\", ctx.contentClassName);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"accept\", ctx.accept)(\"multiple\", ctx.multiple);\n        i0.ɵɵattribute(\"directory\", ctx.directory || undefined)(\"webkitdirectory\", ctx.directory || undefined)(\"mozdirectory\", ctx.directory || undefined)(\"msdirectory\", ctx.directory || undefined)(\"odirectory\", ctx.directory || undefined);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngTemplateOutlet\", ctx.contentTemplate || _r1)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(13, _c1, ctx.openFileSelector));\n      }\n    },\n    dependencies: [i1.NgIf, i1.NgTemplateOutlet],\n    styles: [\".ngx-file-drop__drop-zone[_ngcontent-%COMP%]{height:100px;margin:auto;border:2px dotted #0782d0;border-radius:30px}.ngx-file-drop__drop-zone--over[_ngcontent-%COMP%]{background-color:#93939380}.ngx-file-drop__content[_ngcontent-%COMP%]{display:flex;align-items:center;justify-content:center;height:100px;color:#0782d0}.ngx-file-drop__drop-zone-label[_ngcontent-%COMP%]{text-align:center}.ngx-file-drop__file-input[_ngcontent-%COMP%]{display:none}\"]\n  });\n  return NgxFileDropComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet NgxFileDropModule = /*#__PURE__*/(() => {\n  class NgxFileDropModule {}\n\n  NgxFileDropModule.ɵfac = function NgxFileDropModule_Factory(t) {\n    return new (t || NgxFileDropModule)();\n  };\n\n  NgxFileDropModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: NgxFileDropModule,\n    bootstrap: [NgxFileDropComponent]\n  });\n  NgxFileDropModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [],\n    imports: [CommonModule]\n  });\n  return NgxFileDropModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { NgxFileDropComponent, NgxFileDropContentTemplateDirective, NgxFileDropEntry, NgxFileDropModule }; //# sourceMappingURL=ngx-file-drop.mjs.map","map":null,"metadata":{},"sourceType":"module"}